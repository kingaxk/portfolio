/**
 * This code is designed to be used within the Google Apps Script environment.
 *
 * It provides a dynamic form intended for managers to submit key information
 * regarding a newly hired employee and the type of employment contract being established.
 * The submitted data is both stored in a spreadsheet and used to automatically
 * generate a PDF document, which must be signed and forwarded to the HR department.
 *
 * The form dynamically adjusts to support various types of employment and billing arrangements,
 * ensuring that all required fields are completed and no critical information is missed.
 */


function getHtml() {
  return `
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <meta charset="UTF-8">
    <title>Zgłoszenie nowego zatrudnienia</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Segoe+UI:wght@400;600&display=swap">
    <style>
      body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0f8ff;
        color: #333;
        padding: 40px;
        margin: 0;
      }

      h2 {
        color: #1e6d91;
        margin-bottom: 20px;
      }

      section {
        margin-bottom: 30px;
        background-color: #ffffff;
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        border-left: 6px solid #1e6d91;
      }

      section h3 {
        color: #1e6d91;
        margin-bottom: 15px;
        font-size: 18px;
      }

      form {
        display: flex;
        flex-direction: column;
        gap: 30px;
      }

      label {
        display: block;
        margin-top: 5px;
        font-weight: 500;
      }

      select:invalid, input[type="date"]:invalid {
        color: gray;
      }

      input:focus,
      select:focus,
      textarea:focus {
        background-color: #d4e7ff;
        border-color: #ff5b5b;
      }

      form.was-validated input:invalid,
      form.was-validated select:invalid,
      form.was-validated textarea:invalid {
        background-color: #ffecec !important;
        border-color: #ff5b5b !important;
      }

      select option {
        color: black;
      }

      input, select, textarea {
        width: 100%;
        max-width: 600px;
        padding: 10px;
        margin-top: 5px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9fcff;
      }

      textarea {
        resize: vertical;
        max-width: 900px;
        min-height: 80px;
      }

      .row-flex {
        display: flex;
        align-items: flex-start;
        gap: 10px;        
      }

      button {
        background-color: #1e6d91;
        color: white;
        border: none;
        padding: 12px 24px;
        font-size: 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        width: fit-content;
      }

      button:hover {
        background-color: #155773;
      }

      #msg {
        margin-top: 20px;
        font-weight: bold;
        color: #1e6d91;
      }

      .optional {
        font-weight: normal;
        font-size: 13px;
        color: #777;
      }

      input, select, textarea {
        background-color: #f9fcff;
        transition: background-color 0.2s ease;
      }

      input:-webkit-autofill,
      input:-webkit-autofill:hover, 
      input:-webkit-autofill:focus, 
      textarea:-webkit-autofill,
      textarea:-webkit-autofill:hover,
      textarea:-webkit-autofill:focus,
      select:-webkit-autofill {
        background-color: #eafcf1 !important;
        box-shadow: 0 0 0px 1000px #f9fcff inset;
        -webkit-box-shadow: 0 0 0px 1000px #f9fcff inset;
        -webkit-text-fill-color: #333 !important;
      }

      input.filled,
      select.filled,
      textarea.filled {
        background-color: #eafcf1; 
      }

      input[readonly], textarea[readonly], select[readonly] {
        background-color: #eafcf1 !important;
        color: #888 !important;
        cursor: not-allowed;
        border-style: dashed;
      }

      select.readonly {
        pointer-events: none;
        background-color: #eafcf1;
        color: #888;
        border-style: dashed;
      }



      .adres-blok {
        margin-left: 20px;
        margin-bottom: 10px;
      }

      .adres-domowy-blok {
        margin-left: 30px;
        margin-bottom: 10px;
      }

      .adres-domowy-blok label {
        font-weight: normal;
        display: block;
        margin-bottom: 10px;
      }

      .adres-blok label {
        font-weight: normal;
        display: block;
        margin-bottom: 10px;
      }

      .wsuniecie {
        margin-left: 20px;
      }

      .podsekcja {
        margin-left: 20px;
        margin-top: 10px;
        margin-bottom: 20px;
      }

      .podsekcja-label {
        display: block;
        font-weight: bold;
        margin-bottom: 8px;
        font-size: 15px;
        color: #1e6d91;
      }

      .summary-item {
        display: grid;
        grid-template-columns: 200px 1fr;
        column-gap: 12px;
        align-items: start;
      }

      .summary-label {
        font-weight: bold;
        display: inline-block;
        min-width: 200px;
        color: #1e6d91;
      }

      .summary-value {
        display: inline-block;
      }

      .summary-section {
        margin-top: 25px;
        margin-bottom: 10px;
        font-weight: bold;
        color: #444;
        font-size: 16px;
        border-bottom: 1px solid #eee;
        padding-bottom: 4px;
      }

      @media screen and (max-width: 600px) {
        .summary-label {
         min-width: 120px;
         display: block;
          margin-bottom: 5px;
       }
        .summary-item {
      display: block;
      }
      }

      #summaryModal {
        padding: 20px;
      }

    </style>
  </head>

  <body>
    <h2>Zgłoszenie nowego zatrudnienia</h2>
    <form id="hireForm">

      <section>
        <h3>🧍 Dane pracownika</h3>

        <label>Imię i nazwisko*:
          <input name="imieNazwisko" required>
        </label>

        <label style="display: inline-flex; align-items:center; white-space: nowrap; margin: 5px 0;">
          <input type="checkbox" id="isCompany" name="isCompany"
                onchange="toggleCompanyFields(this.checked)"
                style="margin: 0 5px 0 0;">
          Zatrudniamy jako firmę (B2B)
        </label>


        <div id="individualFields">
          <label>PESEL*:
            <input name="pesel" id="pesel" required maxlength="11" placeholder="np. 12345678901">
          </label>
        </div>

        <div id="companyFields" style="display: none;">
          <label>Nazwa firmy*:
            <input name="nazwaFirmy" id="nazwaFirmy">
          </label>
          <label>NIP*:
            <input name="nip" id="nip" maxlength="10" placeholder="np. 1234567890"  pattern="^\d{10}$" title="Wprowadź dokładnie 10 cyfr">
          </label>
        </div>


        <label id="adresLabel">Adres zamieszkania</label>
        <div class="adres-blok">
          <label>Ulica*:
            <input name="adres_ulica" required>
          </label>
          <label>Nr domu / mieszkania*:
            <input name="adres_nr" required>
          </label>
          <label>Kod pocztowy*:
            <input name="adres_kod" id="kodPocztowy" required placeholder="00-000" maxlength="6">
          </label>
          <label>Miasto*:
            <input name="adres_miasto" required>
          </label>
        </div>

        <label>Nr telefonu*:
          <input name="telefon" id="telefon" required placeholder="123 456 789" maxlength="11" pattern="^\d{3} \d{3} \d{3}$" title="Wprowadź 9 cyfr (np. 123 456 789)">
        </label>

      </section>

      <section>
        <h3>📑 Szczegóły współpracy</h3>

        <label>Stanowisko*:
          <input name="stanowisko" required>
        </label>

        <label>Dział*:
          <select name="dzial" required onchange="toggleInne('dzial', 'dzial_inne')">
            <option value="" disabled selected hidden>Wybierz</option>
            <option>Support</option>
            <option>IT</option>
            <option>Team Nauczycielski</option>
            <option>Inne</option>
          </select>
        </label>

        <div id="dzial_inne" class="wsuniecie" style="display:none;">
          <label>Wpisz inny dział:
            <input name="dzial_inne_input">
          </label>
        </div>

        <div class="row-flex">
          <label>Zakres obowiązków: <span class="optional">(opcjonalne)</span>
            <textarea name="zakres"></textarea>
          </label>
        </div>

        <label>Spółka zatrudniająca*:
          <select name="spolka" required>
            <option value="" disabled selected hidden>Wybierz</option>
            <option>Szkoła w Chmurze</option>
            <option>Fundacja</option>
          </select>
        </label>

        <label>Data podpisania umowy*:
          <input type="date" name="dataZatrudnienia" required>
        </label>

        <label>Rodzaj umowy*:
          <select name="rodzajUmowy" required onchange="toggleCzasTrwania(this.value)">
            <option value="" disabled selected hidden>Wybierz</option>
            <option>Umowa na okres próbny</option>
            <option>Umowa na czas określony</option>
            <option>Umowa na czas nieokreślony</option>
          </select>
        </label>

        <label>Forma współpracy*:
          <select name="forma" required onchange="toggleCzasPracy(this.value); toggleInne('forma', 'forma_inna')">
            <option value="" disabled selected hidden>Wybierz</option>
            <option>Umowa o pracę</option>
            <option>Umowa zlecenie</option>
            <option>Umowa o dzieło</option>
            <option>Inne</option>
          </select>
        </label>
        <div id="forma_inna" class="wsuniecie" style="display:none;">
          <label>Opisz inną formę współpracy:
            <input name="inna_forma_wspolpracy">
          </label>
        </div>

        <div id="czasTrwania">
          <label>Data rozpoczęcia współpracy*:
            <input type="date" name="od" required>
          </label>
          <div id="czasDoContainer">
            <label>Umowna data zakończenia współpracy*:
              <input type="date" name="do" required>
            </label>
          </div>
        </div>

        <div id="czasPracyContainer"></div>

        <div class="row-flex">
          <label>Premie / bonusy / inne: <span class="optional">(opcjonalne)</span>
            <textarea name="premie"></textarea>
          </label>
        </div>

      </section>

      <section>
        <h3>🏢 Organizacja pracy</h3>

        <label>Model miejsca pracy*:
          <select name="model" required onchange="toggleMiejscePracy(this.value)">
            <option value="" disabled selected hidden>Wybierz</option>
            <option>Stacjonarny</option>
            <option>Zdalny</option>
            <option>Hybrydowy</option>
          </select>
        </label>

        <div id="miejscePracy"></div>
        <label>Przełożony*:
          <input name="przelozony" required>
        </label>

        <label>Opiekun wdrożeniowy: <span class="optional">(opcjonalne)</span>
          <input name="opiekun">
        </label>

        <div class="row-flex">
          <label>Inne uwagi: <span class="optional">(opcjonalne)</span>
            <textarea name="uwagi"></textarea>
          </label>
        </div>

      </section>

    <button type="button" onclick="showSummary()">Zapisz</button>

    </form>
    
    <div id="msg"></div>

    <div id="summaryModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.4); z-index:999; overflow-y: auto;">
      <div style="background:white; max-width:600px; margin:40px auto; padding:30px; border-radius:10px; display:flex; flex-direction:column; gap:20px;">
        <h3>📋 Podsumowanie zgłoszenia</h3>
        <div id="summaryContent" style="flex: 1;"></div>
        <div style="display:flex; justify-content:flex-end; gap:10px; padding-top: 10px; border-top: 1px solid #ddd;">
          <button onclick="confirmSubmission()">📄 Zapisz i pobierz PDF</button>
          <button onclick="closeSummary()">✖️ Wróć do edycji</button>
        </div>
      </div>
    </div>

    <div id="loadingModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:1001; justify-content:center; align-items:center;">
      <div style="background:white; padding:30px 40px; border-radius:12px; box-shadow:0 4px 20px rgba(0,0,0,0.2); display:flex; flex-direction:column; align-items:center; gap:15px;">
        <div class="spinner" style="border: 4px solid #e0e0e0; border-top: 4px solid #1e6d91; border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite;"></div>
        <div style="font-size:16px; color:#1e6d91;">Tworzenie PDF…</div>
      </div>
    </div>

    <style>
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>



    <div id="successModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1000; overflow-y:auto;">
      <div style="background:white; max-width:600px; margin:60px auto; padding:30px; border-radius:10px; box-shadow:0 5px 20px rgba(0,0,0,0.2); display:flex; flex-direction:column; gap:20px;">
        <h3>✅ Dokument zapisany</h3>
        <p style="font-size:16px;">Plik został zapisany oraz pobrany automatycznie na Twoje urządzenie.</p>
        <p style="font-size:16px;">📎 <a id="driveLink" href="#" target="_blank" style="color:#1e6d91; text-decoration:underline;">Otwórz dokument na Dysku Google</a></p>
        <p style="font-size:15px;">✍️ <strong>Podpisz dokument i przekaż do działu Kadr.</strong></p>
        <div style="display:flex; justify-content:flex-end;">
          <button onclick="closeSuccessModal()">Zamknij</button>
        </div>
      </div>
    </div>


    <script>

      // Nadanie klasy .filled po wypełnieniu pola
      ["input", "change"].forEach(eventName => {
        document.addEventListener("input", function (e) {
          const el = e.target;

          if (["INPUT", "SELECT", "TEXTAREA"].includes(el.tagName)) {
            const hasValue = el.value && el.value.trim() !== "";
            const isValid = el.checkValidity();

            if (hasValue && isValid) {
              el.classList.add("filled");
            } else {
              el.classList.remove("filled");
            }
          }
        });
      }); 



      // === Obsługa dynamicznych pól ===
      function toggleCompanyFields(isCompany) {
        // Uchwyty do elementów
        const peselBlock = document.getElementById("individualFields");
        const companyBlock = document.getElementById("companyFields");
        const adresLabel = document.getElementById("adresLabel");
        const formaSelect = document.querySelector('select[name="forma"]');

        if (isCompany) {
          peselBlock.style.display = "none";
          document.getElementById("pesel").removeAttribute("required");
          document.getElementById("pesel").value = "";

          companyBlock.style.display = "block";
          document.getElementById("nazwaFirmy").setAttribute("required", "true");
          document.getElementById("nip").setAttribute("required", "true");

          adresLabel.textContent = "Adres firmy";

          formaSelect.innerHTML = `<option value="Umowa B2B" selected>Umowa B2B</option>`;
          formaSelect.value = "Umowa B2B";
          toggleCzasPracy("Umowa B2B");
          formaSelect.classList.add("readonly");

        } else {
          peselBlock.style.display = "block";
          document.getElementById("pesel").setAttribute("required", "true");

          companyBlock.style.display = "none";
          document.getElementById("nazwaFirmy").removeAttribute("required");
          document.getElementById("nip").removeAttribute("required");
          document.getElementById("nazwaFirmy").value = "";
          document.getElementById("nip").value = "";

          adresLabel.textContent = "Adres zamieszkania";

          formaSelect.innerHTML = `
            <option value="" disabled selected hidden>Wybierz</option>
            <option>Umowa o pracę</option>
            <option>Umowa zlecenie</option>
            <option>Umowa o dzieło</option>
            <option>Inne</option>
          `;
          
          formaSelect.classList.remove("readonly");
          formaSelect.value = "";
          toggleCzasPracy("");
         }
      }

      function toggleInne(selectId, inputId) {
        const select = document.querySelector(`select[name="${selectId}"]`);
        const inne = document.getElementById(inputId);
        inne.style.display = select.value === "Inne" ? "block" : "none";
      }

      function toggleCzasTrwania(rodzaj) {
        const doContainer = document.getElementById("czasDoContainer");
        if (rodzaj === "Umowa na czas nieokreślony") {
          doContainer.style.display = "none"
          doContainer.querySelector("input").removeAttribute("required");
        } else if (document.querySelector('select[name="forma"]').value === "Inne") {
          doContainer.style.display = "block";
          doContainer.querySelector("input").removeAttribute("required");
        } else {
          doContainer.style.display = "block";
          doContainer.querySelector("input").setAttribute("required", "true");
        }
      }

      function toggleMiejscePracy(model) {
        const container = document.getElementById("miejscePracy");
        container.innerHTML = "";

        if (model === "Zdalny" || model === "Hybrydowy") {
          container.innerHTML += `
            <label class="wsuniecie">Adres domowy</label>
              <label style="display: inline-flex; align-items:center; white-space: nowrap; margin: 5px 30px;">
                <input type="checkbox" id="sameAsMainAddress" onchange="toggleDomowyCheckbox(this.checked)">
                  Taki sam, jak w danych pracownika
              </label>

            <div id="domowyAddressBlock" class="adres-domowy-blok">
              <label>Ulica*:<input name="adres_domowy_ulica" required></label>
              <label>Nr domu / mieszkania*:<input name="adres_domowy_nr" required></label>
              <label>Kod pocztowy*:<input name="adres_domowy_kod" id="kodPocztowyDomowy" required maxlength="6"></label>
              <label>Miasto*:<input name="adres_domowy_miasto" required></label>
            </div>`;
        }

        if (model === "Stacjonarny" || model === "Hybrydowy") {
          container.innerHTML += `
            <div class="wsuniecie">
              <label>Biuro firmowe*:
                <select name="adres_biuro" required>
                  <option value="" disabled selected hidden>Wybierz</option>
                  <option>Biuro na Powązkowskiej</option>
                  <option>Centrum Spotkań lub Robotyki</option>
                </select>
              </label>
            </div>`;
        }
      }

      function toggleCzasPracy(forma) {
        const container = document.getElementById("czasPracyContainer");
        container.innerHTML = "";

        if (forma === "Umowa o pracę") {
          container.innerHTML = `
            <label>Część etatu*:
              <select name="wymiar" required onchange="toggleInne('wymiar', 'etat_inny')">
                <option value="" disabled selected hidden>Wybierz</option>
                <option>1</option>
                <option>3/4</option>
                <option>1/2</option>
                <option>1/4</option>
                <option>Inne</option>
              </select>
            </label>
            <div id="etat_inny" required class="wsuniecie" style="display:none;">
              <label>Wpisz część etatu:
                <input name="etat_inny_input">
              </label>
            </div>
             <input type="hidden" name="rodzaj_rozliczenia" value="miesięczne">
            <label>Wynagrodzenie miesięczne brutto (PLN)*:
              <input type="number" name="wynagrodzenie" required>
            </label>`;
        } else if (forma === "Umowa B2B" || forma === "Umowa zlecenie") {
          container.innerHTML = `
            <label>Rodzaj rozliczenia*:
              <select name="rodzaj_rozliczenia" onchange="toggleRozliczenie('${forma}', this.value)">
                <option value="" disabled selected hidden>Wybierz</option>
                <option value="miesięczne">Miesięczne</option>
                <option value="godzinowe">Godzinowe</option>
                <option value="inne">Inne</option>
              </select>
            </label>
            <div id="rozliczenieContainer"></div>`;
          toggleRozliczenie(forma, "miesięczne");
        } else if (forma === "Umowa o dzieło" || forma === "Inne") {
          container.innerHTML = `
            <div class="row-flex">
              <label>Opis warunków rozliczeń:
              <textarea name="rozliczenie_inne"></textarea>
              </label>
            </div>`;
        }
      }

      function toggleDomowyCheckbox(isSame) {
        const block = document.getElementById("domowyAddressBlock");

        // Znajdź inputy domowe
        const domowaUlica = document.querySelector('[name="adres_domowy_ulica"]');
        const domowaNr    = document.querySelector('[name="adres_domowy_nr"]');
        const domowaKod   = document.querySelector('[name="adres_domowy_kod"]');
        const domowaMiasto= document.querySelector('[name="adres_domowy_miasto"]');

        if (isSame) {
          const mainStreet = document.querySelector('[name="adres_ulica"]').value;
          const mainNr     = document.querySelector('[name="adres_nr"]').value;
          const mainKod    = document.querySelector('[name="adres_kod"]').value;
          const mainCity   = document.querySelector('[name="adres_miasto"]').value;

          domowaUlica.value  = mainStreet;
          domowaNr.value     = mainNr;
          domowaKod.value    = mainKod;
          domowaMiasto.value = mainCity;

          domowaUlica.readOnly  = true;
          domowaNr.readOnly  = true;
          domowaKod.readOnly  = true;
          domowaMiasto.readOnly  = true;

        } else {
          domowaUlica.readOnly  = false;
          domowaNr.readOnly     = false;
          domowaKod.readOnly    = false;
          domowaMiasto.readOnly = false;

          domowaUlica.value  = "";
          domowaNr.value     = "";
          domowaKod.value    = "";
          domowaMiasto.value = "";
        }
      }


      function toggleRozliczenie(forma, typ) {
        const container = document.getElementById("rozliczenieContainer");
        container.innerHTML = "";

        if (typ === "miesięczne") {
          container.innerHTML = `
            <label>Wynagrodzenie miesięczne (PLN brutto)*:<input type="number" name="wynagrodzenie" required></label>
            <label>Liczba godzin miesięcznie:<input type="number" name="godziny_miesiecznie" optional></label>`;
        } else if (typ === "godzinowe") {
          container.innerHTML = `
            <label>Stawka za godzinę (PLN brutto)*:<input type="number" name="stawka_godzinowa" required></label>
            <label>Liczba godzin miesięcznie:<input type="number" name="godziny_miesiecznie" optional></label>`;
        } else if (typ === "inne") {
          container.innerHTML = `
            <div class="row-flex">
              <label>Opis warunków rozliczenia*:
              <textarea name="rozliczenie_inne" required></textarea>
              </label>
            </div>`;
        }
      }

      // === Obsługa kodów pocztowych i numeru telefonu ===
      document.addEventListener("input", function (e) {
        if (e.target.id === "kodPocztowy" || e.target.id === "kodPocztowyDomowy") {
          let val = e.target.value.replace(/\D/g, "").slice(0, 5);
          if (val.length >= 3) val = val.slice(0, 2) + "-" + val.slice(2);
          e.target.value = val;
        }

        if (e.target.id === "telefon") {
          let val = e.target.value.replace(/\D/g, "").slice(0, 9);
          if (val.length > 3 && val.length <= 6) {
            val = val.slice(0, 3) + " " + val.slice(3);
          } else if (val.length > 6) {
            val = val.slice(0, 3) + " " + val.slice(3, 6) + " " + val.slice(6);
          }
          e.target.value = val;
        }
      });


      // === Potwierdzenie i wysyłka ===
      function confirmSubmission() {
        const btn = event.target;
        btn.disabled = true;
        btn.innerText = "Tworzenie PDF...";

        document.getElementById("summaryModal").style.display = "none";
        document.getElementById("loadingModal").style.display = "flex";

        const data = window._formDataToSend;
        const summaryHTML = document.getElementById("summaryContent").innerHTML;

        google.script.run.withSuccessHandler(function (response) {
          const { url, blob, name } = response;

          const link = document.createElement("a");
          link.href = "data:application/pdf;base64," + btoa(String.fromCharCode(...new Uint8Array(blob)));
          link.download = name;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          document.getElementById("loadingModal").style.display = "none";
          document.getElementById("summaryModal").style.display = "none";
          document.getElementById("driveLink").href = url;
          document.getElementById("successModal").style.display = "block";
          closeSummary();

          document.getElementById("hireForm").reset();
          window.scrollTo({ top: 0, behavior: 'smooth' });


          
        }).submitForm(data);
      }

      function closeSuccessModal() {
        document.getElementById("successModal").style.display = "none";
        document.getElementById("hireForm").reset(); // resetuj formularz
        window.scrollTo({ top: 0, behavior: 'smooth' }); // przewiń do góry
      }


      // === Podsumowania ===
      function showSummary() {
        const form = document.getElementById("hireForm");
        const isCompany = document.getElementById("isCompany").checked;

        if (!form.checkValidity()) {
          form.classList.add("was-validated");
          form.reportValidity();
          return;
        }
        form.classList.remove("was-validated");

        const data = Object.fromEntries(new FormData(form).entries());
        window._formDataToSend = data;

        let summary = "";
        function addItem(label, value, multiline = false) {
          const formattedValue = (value || "—").toString().replace(/\n/g, "<br>");
          if (multiline) {
            summary += `
              <div class="summary-item">
                <div class="summary-label" style="display:block; margin-bottom: 4px;">${label}:</div>
                <div class="summary-value">${formattedValue}</div>
              </div>`;
          } else {
            summary += `
              <div class="summary-item">
                <span class="summary-label">${label}:</span> 
                <span class="summary-value">${formattedValue}</span>
              </div>`;
          }
        }

        summary += `<div class="summary-section">🧍 Dane pracownika</div>`;
        addItem("Imię i nazwisko", data.imieNazwisko);
        if (isCompany) {
          addItem("Nazwa firmy", data.nazwaFirmy);
          addItem("NIP", data.nip);
        } else {
          addItem("PESEL", data.pesel);
        }
        addItem("Adres", `${data.adres_ulica} ${data.adres_nr}, ${data.adres_kod} ${data.adres_miasto}`);
        addItem("Telefon", data.telefon);

        summary += `<div class="summary-section">📑 Szczegóły współpracy</div>`;
        addItem("Stanowisko", data.stanowisko);
        addItem("Dział", data.dzial + (data.dzial_inne_input ? ` (${data.dzial_inne_input})` : ""));
        addItem("Zakres obowiązków", data.zakres, true);
        addItem("Spółka zatrudniająca", data.spolka);
        addItem("Data podpisania umowy", data.dataZatrudnienia);
        addItem("Forma współpracy", data.forma);
        if (data.inna_forma_wspolpracy) addItem("Opis formy współpracy", data.inna_forma_wspolpracy, true);
        addItem("Rodzaj umowy", data.rodzajUmowy);
        addItem("Od", data.od);
        addItem("Do", data.do);
        if (data.wymiar) addItem("Wymiar etatu", data.wymiar);
        if (data.etat_inny_input) addItem("Wymiar etatu", data.etat_inny_input);
        if (data.wynagrodzenie) addItem("Wynagrodzenie miesięczne", data.wynagrodzenie);
        if (data.stawka_godzinowa) addItem("Stawka godzinowa", data.stawka_godzinowa);
        if (data.godziny_miesiecznie) addItem("Liczba godzin miesięcznie", data.godziny_miesiecznie);
        if (data.rozliczenie_inne) addItem("Sposób rozliczenia", data.rozliczenie_inne, true);
        addItem("Premie", data.premie, true);

        summary += `<div class="summary-section">🏢 Organizacja pracy</div>`;
        addItem("Model miejsca pracy", data.model);
        if (data.adres_biuro) addItem("Biuro", data.adres_biuro);
        if (data.adres_domowy_ulica) {
          addItem("Adres domowy", `${data.adres_domowy_ulica} ${data.adres_domowy_nr}, ${data.adres_domowy_kod} ${data.adres_domowy_miasto}`);
        }
        addItem("Przełożony", data.przelozony);
        addItem("Opiekun", data.opiekun);
        addItem("Uwagi", data.uwagi, true);

        document.getElementById("summaryContent").innerHTML = summary;
        document.getElementById("summaryModal").style.display = "block";
      }


      function closeSummary() {
        document.getElementById("summaryModal").style.display = "none";
      }
   
    </script>

  </body>
</html>
  `;
}



function doGet() {
  return HtmlService.createHtmlOutput(getHtml())
    .setTitle("Zgłoszenie zatrudnienia")
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}


function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function submitForm(data) {
  const sheet = SpreadsheetApp.openById("ID_GOOGLE_SPREADSHEET").getSheetByName("GOOGLE_SPREADSHEET_SHEET_NAME"); # PUT YOUR DATA HERE
  const folder = DriveApp.getFolderById(ID_GOOGLE_DRIVE"); # PUT YOUR DATA HERE

  const isCompany = (data.isCompany === "on");
  const adres = `${data.adres_ulica} ${data.adres_nr}, ${data.adres_kod} ${data.adres_miasto}`;
  const adresDomowy = data.adres_domowy_ulica ? `${data.adres_domowy_ulica} ${data.adres_domowy_nr}, ${data.adres_domowy_kod} ${data.adres_domowy_miasto}` : "-";
  const biuro = data.adres_biuro || "-";
  const dzial = data.dzial_inne_input || data.dzial;
  const forma = data.forma || data.inna_forma_wspolpracy;
  const wymiar = data.etat_inny_input ? `${data.etat_inny_input} etatu` : data.wymiar  ? `${data.wymiar} etatu` : data.godziny_miesiecznie  ? `${data.godziny_miesiecznie} h`  : "-";
  const rozliczenieTyp = data.rodzaj_rozliczenia || data.rozliczenie_inne || "-";
  const wynagrodzenie = data.wynagrodzenie ? data.wynagrodzenie : data.stawka_godzinowa ? `${data.stawka_godzinowa} zł/h` : data.rozliczenie_inne ? data.rozliczenie_inne : "-";

  sheet.appendRow([
    new Date(),
    data.imieNazwisko,
    data.pesel || "-",
    data.nazwaFirmy || "-",
    data.nip || "-",
    adres,
    data.telefon,
    data.stanowisko,
    dzial,
    data.zakres || "-",
    data.spolka,
    data.dataZatrudnienia,
    data.rodzajUmowy,
    forma,
    data.od,
    data.do || "-",
    wymiar,
    rozliczenieTyp,
    wynagrodzenie,
    data.premie || "-",
    data.model,
    biuro || "-",
    adresDomowy || "-",
    data.przelozony,
    data.opiekun  || "-",
    data.uwagi || "-"
  ]);

const doc = DocumentApp.create("Nowe zatrudnienie - " + data.imieNazwisko);
const body = doc.getBody();
body.appendParagraph("Zgłoszenie nowego zatrudnienia").setHeading(DocumentApp.ParagraphHeading.HEADING1)
  .setFontSize(14).setBold(true).setSpacingAfter(12);

  const sekcje = [
    {
      title: "🧍 Dane pracownika",
      dane: (function() {
        // Tworzymy tymczasową tablicę 'arr'
        const arr = [
          ["Imię i nazwisko", data.imieNazwisko]
        ];
        if (isCompany) {
          arr.push(["Nazwa firmy", data.nazwaFirmy]);
          arr.push(["NIP", data.nip]);
        } else {
          arr.push(["PESEL", data.pesel]);
        }
        arr.push(["Adres", adres]);
        arr.push(["Telefon", data.telefon]);
        return arr;
      })()
    },
    {
      title: "📑 Szczegóły współpracy",
      dane: [
        ["Stanowisko", data.stanowisko],
        ["Dział", dzial],
        ["Zakres obowiązków", data.zakres || "-"],
        ["Spółka zatrudniająca", data.spolka],
        ["Data podpisania umowy", data.dataZatrudnienia],
        ["Rodzaj umowy", data.rodzajUmowy],
        ["Forma współpracy", forma],
        ["Data rozpoczecia", data.od],
        ["Data zakończenia", data.do || "-"],
        ["Wymiar czasu pracy", wymiar || "-"],
        ["Wynagrodzenie", wynagrodzenie],
        ["Premie/bonusy", data.premie || "-"]
      ]
    },
    {
      title: "🏢 Organizacja pracy",
      dane: [
        ["Model miejsca pracy", data.model],
        ["Adres domowy", adresDomowy],
        ["Biuro", biuro],
        ["Przełożony", data.przelozony],
        ["Opiekun wdrożeniowy", data.opiekun || "-"],
        ["Uwagi", data.uwagi || "-"]
      ]
    }
  ];

sekcje.forEach(s => {
  body.appendParagraph(s.title)
    .setHeading(DocumentApp.ParagraphHeading.HEADING2)
    .setFontSize(12)
    .setSpacingBefore(4)
    .setSpacingAfter(2);

  const tableData = s.dane.map(([label, val]) => [label, val]);
  const table = body.appendTable(tableData);



  for (let i = 0; i < table.getNumRows(); i++) {
    const row = table.getRow(i);
    row.getCell(0).setBold(true).setBackgroundColor("#f0f8ff").setFontSize(9).setPaddingTop(1).setPaddingBottom(1);
    row.getCell(1).setFontSize(11).setPaddingTop(1).setPaddingBottom(1);
  }
});



  body.appendParagraph("✍️ Podpisy i akceptacje").setHeading(DocumentApp.ParagraphHeading.HEADING2).setFontSize(14).setBold(true).setSpacingAfter(8);
  body.appendParagraph("Data i podpis bezpośredniego przełożonego:").setFontSize(10).setSpacingBefore(6).setSpacingAfter(20);
  body.appendParagraph("_____________________________________________").setFontSize(12).setSpacingAfter(6);
  body.appendParagraph("Akceptacja najwyższego kierownictwa:").setFontSize(10).setSpacingAfter(20);
  body.appendParagraph("_____________________________________________").setFontSize(12);


  doc.saveAndClose();

  const pdf = doc.getAs("application/pdf");
  const file = folder.createFile(pdf);
  file.setName("Nowe zatrudnienie - " + data.imieNazwisko);

  return {
    url: file.getUrl(),
    blob: pdf.getBytes(),
    name: file.getName()
  };
}
